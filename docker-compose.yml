services:
  qhana-plugin-runner:
    image: ghcr.io/ust-quantil/qhana-plugin-runner:main
    depends_on:
      - redis
      - postgres
      - minio
    ports:
      - "5005:8080"
    volumes:
      - instance:/app/instance
    environment:
      CONCURRENCY: 2
      BROKER_URL: redis://redis:6379
      RESULT_BACKEND: redis://redis:6379
      CELERY_QUEUE: "qhana_queue1"
      SQLALCHEMY_DATABASE_URI: "postgresql+psycopg2://user:password@postgres:5432/default_db"
      DEFAULT_FILE_STORE: "minio"
      MINIO_CLIENT: '{"endpoint": "minio:9000", "access_key": "QHANA", "secret_key": "QHANAQHANA", "secure": false}'
      LOCALHOST_PROXY_PORTS: &localhost-proxy-ports ":5005 :5006 :5007 :9000 :9001 :9091 ${EXTRA_PROXY_PORTS}"
      GIT_PLUGINS: "git+https://github.com/UST-QuAntiL/qhana-plugin-runner.git@main#subdirectory=/plugins\ngit+https://github.com/UST-QuAntiL/nisq-analyzer-prio-service.git@master#subdirectory=/plugins"
      NISQ_ANALYZER_UI_URL: http://localhost:5009
    extra_hosts:
      - "host.docker.internal:host-gateway"
  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
  postgres:
    image: "postgres:latest"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: default_db
  postgres-registry:
    image: "postgres:latest"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: default_db
  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    volumes:
      - minio:/data
    environment:
      MINIO_ROOT_USER: QHANA
      MINIO_ROOT_PASSWORD: QHANAQHANA
    ports:
      - "9000:9000"
      - "9001:9001"
  muse-db:
    image: ghcr.io/ust-quantil/mini-muse:main
  worker:
    image: ghcr.io/ust-quantil/qhana-plugin-runner:main
    depends_on:
      - qhana-plugin-runner
    volumes:
      - instance:/app/instance
    environment:
      CONTAINER_MODE: worker
      CONCURRENCY: 2
      BROKER_URL: redis://redis:6379
      RESULT_BACKEND: redis://redis:6379
      CELERY_QUEUE: "qhana_queue1"
      SQLALCHEMY_DATABASE_URI: "postgresql+psycopg2://user:password@postgres:5432/default_db"
      DEFAULT_FILE_STORE: "minio"
      MINIO_CLIENT: '{"endpoint": "minio:9000", "access_key": "QHANA", "secret_key": "QHANAQHANA", "secure": false}'
      LOCALHOST_PROXY_PORTS: *localhost-proxy-ports
      GIT_PLUGINS: "git+https://github.com/UST-QuAntiL/qhana-plugin-runner.git@main#subdirectory=/plugins\ngit+https://github.com/UST-QuAntiL/nisq-analyzer-prio-service.git@master#subdirectory=/plugins"
    extra_hosts:
      - "host.docker.internal:host-gateway"
  backend:
    image: ghcr.io/ust-quantil/qhana-backend:main
    volumes:
      - experiments:/app/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      LOCALHOST_PROXY_PORTS: *localhost-proxy-ports
      QHANA_HOST: http://localhost:9091
    ports:
      - 9091:9090
  ui:
    image: ghcr.io/ust-quantil/qhana-ui:main
    ports:
      - 8080:8080
    environment:
      PLUGIN_REGISTRY_PROTOCOL: "http:"
      PLUGIN_REGISTRY_HOSTNAME: localhost
      PLUGIN_REGISTRY_PORT: 5006
      PLUGIN_REGISTRY_PATH: /api/
    extra_hosts:
      - "host.docker.internal:host-gateway"
  registry:
    image: ghcr.io/ust-quantil/qhana-plugin-registry:main
    ports:
      - "5006:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      WAIT_HOSTS: redis:6379, postgres-registry:5432, qhana-plugin-runner:8080
      WAIT_SLEEP_INTERVAL: 5
      WAIT_TIMEOUT: 600
      BROKER_URL: redis://redis:6379
      RESULT_BACKEND: redis://redis:6379
      CELERY_QUEUE: "registry_queue"
      SQLALCHEMY_DATABASE_URI: "postgresql+psycopg2://user:password@postgres-registry:5432/default_db"
      LOCALHOST_PROXY_PORTS: *localhost-proxy-ports
      INITIAL_PLUGIN_SEEDS: "http://localhost:5005"
      PRECONFIGURED_SERVICES: '[{"serviceId": "qhana-backend", "name": "Backend", "url": "http://localhost:9091"}]'
  registry-worker:
    image: ghcr.io/ust-quantil/qhana-plugin-registry:main
    ports:
      - "5007:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      WAIT_HOSTS: redis:6379, postgres-registry:5432, qhana-plugin-runner:8080
      WAIT_SLEEP_INTERVAL: 5
      WAIT_TIMEOUT: 600
      CONTAINER_MODE: worker
      BROKER_URL: redis://redis:6379
      RESULT_BACKEND: redis://redis:6379
      CELERY_QUEUE: "registry_queue"
      SQLALCHEMY_DATABASE_URI: "postgresql+psycopg2://user:password@postgres-registry:5432/default_db"
      LOCALHOST_PROXY_PORTS: *localhost-proxy-ports
      PLUGIN_DISCOVERY_INTERVAL: 60
      PERIODIC_SCHEDULER: true

  # For NISQ-Analyzer plugin
  nisq-analyzer-ui:
    profiles: ["nisq"]
    image: planqk/nisq-analyzer-ui:latest
    depends_on:
      - nisq-analyzer-db
    environment:
      NISQ_ANALYZER_HOST_NAME: localhost
      NISQ_ANALYZER_PORT: 5010
    ports:
      - '5009:80'
    networks:
      - default
  nisq-analyzer:
    profiles: ["nisq"]
    image: planqk/nisq-analyzer:without-qprov
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      POSTGRES_HOSTNAME: nisq-analyzer-db
      POSTGRES_PORT: 5060
      POSTGRES_USER: nisq
      POSTGRES_PASSWORD: nisq
      POSTGRES_DB: nisq

      # activate correct application properties
      SPRING_PROFILES_ACTIVE: docker

      TRANSLATOR_HOSTNAME: quantum-transpiler
      TRANSLATOR_PORT: 5012
      # Configuration of the SDK Connector Services
      QISKIT_HOSTNAME: qiskit-service
      QISKIT_PORT: 5013
      FOREST_HOSTNAME: forest-service
      FOREST_PORT: 5014
      PYTKET_HOSTNAME: pytket-service
      PYTKET_PORT: 5015
      # Configure Prioritization Service connection
      PRIORITIZATION_HOSTNAME: qhana-plugin-runner
      PRIORITIZATION_PORT: 8080
    ports:
      - '5010:5010'
    networks:
      - default

  qiskit-service:
    image: planqk/qiskit-service:latest
    profiles: ["nisq"]
    command: sh /app/startup.sh
    ports:
      - "5013:5013"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    networks:
      - default

  qiskit-rq-worker:
    image: planqk/qiskit-service:latest
    profiles: ["nisq"]
    command: rq worker --url redis://redis:6379 qiskit-service_execute
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    deploy:
      replicas: 2
  
  forest-service:
    image: planqk/forest-service:latest
    profiles: ["nisq"]
    command: sh /app/startup.sh
    ports:
      - "5014:5014"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:////data/app.db
      - QVM_HOSTNAME=rigetti-qvm
      - QVM_PORT=5016
      - QUILC_HOSTNAME=rigetti-quilc
      - QUILC_PORT=5017
    volumes:
      - exec_data:/data
    networks:
      - default

  forest-rq-worker:
    image: planqk/forest-service:latest
    profiles: ["nisq"]
    command: rq worker --url redis://redis:6379 forest-service_execute
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:////data/app.db
      - QVM_HOSTNAME=rigetti-qvm
      - QVM_PORT=5016
      - QUILC_HOSTNAME=rigetti-quilc
      - QUILC_PORT=5017
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    networks:
      - default

  pytket-service:
    image: planqk/pytket-service:latest
    profiles: ["nisq"]
    command: sh /app/startup.sh
    ports:
      - "5015:5015"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:////data/app.db
      - QVM_HOSTNAME=rigetti-qvm
      - QVM_PORT=5016
    volumes:
      - exec_data:/data
    networks:
      - default

  pytket-rq-worker:
    image: planqk/pytket-service:latest
    profiles: ["nisq"]
    command: rq worker --url redis://redis:6379 pytket-service_execute
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:////data/app.db
      - QVM_HOSTNAME=rigetti-qvm
      - QVM_PORT=5016
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    networks:
      - default
        
  rigetti-qvm:
    image: rigetti/qvm
    profiles: ["nisq"]
    ports:
      - "5016:5016"
    command: -S -p 5016
    networks:
      - default

  rigetti-quilc:
    image: rigetti/quilc
    profiles: ["nisq"]
    ports:
      - "5017:5017"
    command: -S -p 5017
    networks:
      - default

  nisq-analyzer-db:
    build:
      context: nisq-analyzer-db
      dockerfile: Dockerfile
    profiles: ["nisq"]
    environment:
      POSTGRES_PASSWORD: nisq
      POSTGRES_USER: nisq
      POSTGRES_DB: nisq
    command: -p 5060
    ports:
      - "5060:5060"
      
volumes:
  minio:
  instance:
  experiments:
  exec_data:
networks:
  default:
    driver: bridge
